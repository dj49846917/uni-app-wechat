<template>
	<view>
		<!-- 状态栏 -->
		<view class="tipBar" :style="getStatusBarHeight"></view>
		<!-- 导航栏 -->
		<view :style="getNavBarPosition">
			<my-nav showBackIcon :showMessageCount="false" :title="navTitle" :showRightFirstIcon="false" :rightRightSource="more_menu_icon"
			 secondFucType="chat" />
		</view>
		<!-- 内容区域 -->
		<scroll-view scroll-y="true" :style="getScrollStyle" :scroll-into-view="scrollIntoView">
			<view @click="closeKeyBoard">
				<view class="chat_item" v-for="(item, index) in chatList" :key="index" :id="'chatItem_'+index">
					<chat-item-list ref="list" :data="item" :lastTime="index > 0 ? chatList[index - 1].create_time : 0"></chat-item-list>
				</view>
			</view>
		</scroll-view>
		<!-- 底部区域 -->
		<view class="acc_bottom" :style="'bottom:' +keyBoardHeight+'px'">
			<view class="acc_bottom_chat">
				<view class="acc_bottom_sound" @click="handleAudio">
					<text class="iconfont acc_bottom_sound_icon" v-if="showAudioWord === 1">{{ sound_down }}</text>
					<text class="iconfont acc_bottom_sound_icon" v-else>{{ sound_icon }}</text>
				</view>
				<view class="acc_bottom_input acc_bottom_box" v-if="showAudioWord === 1" @touchstart="audioStart" @touchend="audioEnd">
					<text class="acc_bottom_box_text">按住 说话</text>
				</view>
				<input v-else :focus="isShowInitKeyBoard===1" v-model="chatValue" ref="input" type="text" :class="showSendBtn === 2 ? 'acc_bottom_input' : 'acc_bottom_input2'"
				 @focus="upKeyBoarrd" :adjust-position="false" @input="handleInput" />
				<view class="acc_bottom_iconBox">
					<text class="iconfont icon_emoji">{{ emoji_icon }}</text>
					<text class="iconfont icon_add" v-if="showSendBtn === 2" @click="showBottomMenu">{{ add_icon }}</text>
					<!-- <button class="acc_bottom_iconBox_send" v-else type="default">发送</button> -->
					<view v-else class="button" @click="sendMsg">
						<text class="button_text">发送</text>
					</view>
				</view>
			</view>
		</view>
		<!-- 底部点击+出来的弹窗 -->
		<my-model ref="popUp2" isBottom isMaskOpacity :isShowMask="false">
			<chat-bottom-menu :list="menuList" @scrollToBottom="handleClick"></chat-bottom-menu>
		</my-model>
		<!-- 长按语音出来的弹窗 -->
		<audio-model ref="audio" v-if="showAudioModel"></audio-model>
	</view>
</template>

<script>
	import {
		mapState
	} from 'vuex'
	import myNav from '@/component/myNav/myNav.nvue';
	import Constant from '@/constant/js/const.js';
	import chatItemList from "@/pages/chatDetail/chatItemList.nvue";
	import myModel from '@/component/myModel/myModel.nvue';
	import chatBottomMenu from '@/pages/chatDetail/chatBottomMenu.nvue';
	import audioModel from '@/pages/chatDetail/audioModel.nvue';
	import {
		chatBottomMenuList,
	} from '@/static/data/chatDetail.js';
	export default {
		components: {
			myNav,
			chatItemList,
			myModel,
			chatBottomMenu,
			audioModel
		},
		data() {
			return {
				navTitle: "", // 从列表页面传递过来的title
				id: "", // 从列表页面传递过来的id
				more_menu_icon: Constant.more_icon, // 更多
				sound_icon: Constant.sound_icon, // 语音
				sound_down: Constant.audio_down, // 收起语音
				emoji_icon: Constant.emoji_icon, // 表情
				add_icon: Constant.add_icon, // 更多
				keyBoardHeight: 0, // 键盘的高度
				chatValue: '', // 输入的内容
				showSendBtn: 2, // 是否展示发送按钮
				showAudioWord: 2, // 是否展示语音文字
				isShowInitKeyBoard: 2, // 是否自动展示键盘
				isOpenModel: false, // 是否打开底部按钮的弹窗
				menuList: chatBottomMenuList, // 底部菜单列表
				scrollIntoView: "", // Scroll-view滑动到对应的位置的id
				showAudioModel: false,  // 是否展示音频弹窗
				// chatList: [],  // 聊天列表
			};
		},
		computed: {
			...mapState({
				// 获取状态栏的高度
				getStatusBarHeight: (state) => {
					return `height: ${state.app.tipBarHeight}px;`
				},
				// 导航栏的位置
				getNavBarPosition: (state) => {
					return `position: fixed; top: ${state.app.tipBarHeight}px`
				},
				chatList: (state) => state.chatDetail.chatList
			}),
			// 获取滚动区域的高度
			getScrollStyle() {
				const bottomHeight = uni.upx2px(106); // 底部高度
				const tipBarHeight = this.$store.state.app.tipBarHeight; // 状态栏高度
				const navBarHeight = uni.upx2px(90); // 导航栏高度
				const top = tipBarHeight + navBarHeight
				// #ifndef MP
				// const scollHeight = this.$store.state.app.height - tipBarHeight - navBarHeight - bottomHeight - this.keyBoardHeight
				return `width: 750rpx; background-color: ${Constant.boxBgColor}; position: fixed; top: ${top}px; bottom: ${bottomHeight + this.keyBoardHeight}px;`
				// #endif

				// #ifdef MP
				const windowHeight = uni.getSystemInfoSync().windowHeight
				// const scollHeight = windowHeight - tipBarHeight - navBarHeight - bottomHeight - this.keyBoardHeight
				return `width: 750rpx; background-color: ${Constant.boxBgColor}; position: fixed; top: ${top}px; bottom: ${bottomHeight + this.keyBoardHeight}px; z-index: 9999;`
				// #endif
			}
		},
		// 获取页面传入的参数
		onLoad(option) {
			this.navTitle = option.title
			this.id = option.id
		},
		created() {
			if (this.chatValue) {
				this.isShowInitKeyBoard = 1
			}
			// 获取聊天列表
			const id = this.id
			this.$store.dispatch("chatDetail/getList", id)
			// 获取数据
			// this.chatList = chatList
		},
		mounted() {
			// 监听键盘高度变化
			uni.onKeyboardHeightChange(res => {
				if (res.height > 0) {
					this.$store.commit("app/setKeyBoardHeight", res.height)
					this.keyBoardHeight = res.height
				}
			})
			this.pageToBottom()
		},
		methods: {
			// 输入框获取焦点
			upKeyBoarrd() {
				this.keyBoardHeight = this.$store.state.app.keyBoardHeight
				this.isShowInitKeyBoard = 1
				this.isOpenModel = false
				this.$refs.popUp2.hide()
			},
			// 点击scroll-view区域清除键盘高度
			closeKeyBoard() {
				uni.hideKeyboard()
				this.keyBoardHeight = 0
				this.isOpenModel = false
				this.$refs.popUp2.hide()
			},
			// 输入框输入内容
			handleInput(e) {
				this.chatValue = e.detail.value
				if (e.detail.value) {
					this.showSendBtn = 1
					this.isShowInitKeyBoard = 1
				} else {
					this.showSendBtn = 2
					this.isShowInitKeyBoard = 2
				}
			},
			// 点击语音按钮
			handleAudio() {
				if (this.showAudioWord === 2) {
					this.showAudioWord = 1
					this.showSendBtn = 2
					this.isShowInitKeyBoard = 2
					uni.hideKeyboard()
				} else {
					this.showAudioWord = 2
					if (this.chatValue) {
						this.showSendBtn = 1
						this.isShowInitKeyBoard = 1
					} else {
						this.showSendBtn = 2
						this.isShowInitKeyBoard = 2
					}
				}
			},
			
			// touchstart语音
			audioStart() {
				console.log('11')
				this.showAudioModel = true
				this.$nextTick(()=>{
					this.$refs.audio.show()
				})
			},
			
			// touchend语音
			audioEnd() {
				console.log('2')
				this.$refs.audio.hide()
				this.$nextTick(()=>{
					this.showAudioModel = false
				})
				
			},
			
			// 点击+号弹出按钮
			showBottomMenu() {
				if (this.isOpenModel) {
					this.isOpenModel = false
					this.isShowInitKeyBoard = 1 // 聚焦
					this.keyBoardHeight = this.$store.state.app.keyBoardHeight
					this.$refs.popUp2.hide()

				} else {
					this.isOpenModel = true
					this.isShowInitKeyBoard = 2
					this.keyBoardHeight = uni.upx2px(626)
					uni.hideKeyboard()
					this.$refs.popUp2.show()
				}
				this.$nextTick(function() {
					this.pageToBottom()
				})
			},
			// 回到底部
			pageToBottom() {
				setTimeout(()=>{
					let lastIndex = this.$store.state.chatDetail.chatList.length - 1
					this.scrollIntoView = 'chatItem_' + lastIndex
				}, 300)
				// this.$nextTick(function() {
					
				// })
			},
			// 发送消息
			sendMsg() {
				const params = {
					id: Math.random(),
					from_avatar: "/static/images/userpic.jpg",
					from_name: "杜江",
					from_id: 6,
					to_id: 2,
					to_name: "妈",
					to_avatar: "/static/images/user_other.jpg",
					chat_type: "user",
					type: "text",
					data: this.chatValue,
					options: {},
					create_time: new Date().valueOf(),
					isremove: 0,
					sendStatus: "success",
					k: "k0"
				}
				this.$store.dispatch("chatDetail/addMessage", params)
				this.chatValue = ""
				this.pageToBottom()
				this.isShowInitKeyBoard = 2
				this.showSendBtn = 2
			},
			// 点击底部菜单的回调
			handleClick() {
				this.pageToBottom()
			}
		}
	}
</script>

<style lang="scss" scoped>
	@import "@/constant/css/constant.scss";

	.tipBar {
		@include tabBarStyle;
		position: fixed;
		top: 0;
	}

	.acc_content2 {
		height: 400rpx;
		background-color: red;
	}

	.chat_item_time {
		height: 98rpx;
		width: $boxWidth;
		@include center;
	}

	.chat_item_time_text {
		font-size: 24rpx;
		color: $listTextColor;
	}

	.chat_item_other {
		flex-direction: row;
		align-items: flex-start;
		margin-bottom: 19rpx;
	}

	.chat_item_my {
		flex-direction: row;
		align-items: flex-start;
		justify-content: flex-end;
		margin-bottom: 19rpx;
	}

	.chat_item_other_icon {
		width: 76rpx;
		height: 76rpx;
		border-radius: 8rpx;
		margin-left: 22rpx;
	}

	.chat_item_my_icon {
		@extend .chat_item_other_icon;
		margin-left: 0;
		margin-right: 22rpx;
	}

	.chat_item_other_box {
		padding-left: 22rpx;
		position: relative;
	}

	.chat_item_my_box {
		padding-right: 22rpx;
		position: relative;
	}

	.chat_item_my_box {
		padding-left: 22rpx;
		position: relative;
	}

	.chat_item_other_box_icon {
		position: fixed;
		top: 20rpx;
		left: 0rpx;
		color: #fff;
	}

	.chat_item_my_box_icon {
		position: fixed;
		top: 20rpx;
		right: 0rpx;
		color: #fff;
	}

	.chat_item_other_box_content {
		max-width: 510rpx;
		border-radius: 8rpx;
		background-color: #fff;
	}

	.chat_item_other_box_content_text {
		font-size: 32rpx;
		color: $listTitleColor;
		padding: 19rpx;
	}


	.acc_bottom {
		width: $boxWidth;
		position: fixed;
		@include borderTop;
		background-color: #f7f7f7;
	}

	.acc_bottom_chat {
		width: $boxWidth;
		height: 106rpx;
		@include verticalCenter;
	}

	.acc_bottom_sound {
		width: 92rpx;
		height: 92rpx;
		@include verticalCenter;
		padding-left: 20rpx;
	}

	.acc_bottom_sound_icon {
		font-size: 50rpx;
	}

	.acc_bottom_input {
		width: 488rpx;
		height: 72rpx;
		background-color: #fff;
		border-radius: 10rpx;
		padding-left: 20rpx;
	}

	.acc_bottom_box {
		@extend .acc_bottom_input;
		@include center;
	}

	.acc_bottom_box_text {
		font-size: 28rpx;
	}

	.acc_bottom_input2 {
		@extend .acc_bottom_input;
		width: 430rpx;
	}

	.acc_bottom_iconBox {
		flex: 1;
		@include verticalCenter;
		justify-content: flex-end;
		padding-right: 20rpx;
	}

	.icon_emoji {
		@extend .acc_bottom_sound_icon;
		margin-right: 22rpx;
	}

	.icon_add {
		font-size: 54rpx;
	}

	.acc_bottom_iconBox_send {
		width: 114rpx;
		height: 72rpx;
		background-color: $selectedColor;
		font-size: 28rpx;
		color: #fff;
	}

	.button {
		background-color: $selectedColor;
		width: 114rpx;
		height: 70rpx;
		border-radius: 8rpx;
		@include center;
	}

	.button_text {
		font-size: 30rpx;
		color: #fff;
	}
</style>
