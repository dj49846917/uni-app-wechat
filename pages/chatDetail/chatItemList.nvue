<template>
	<view>
		<view class="chat_item_time" v-if="getTime">
			<text class="chat_item_time_text">{{ getTime }}</text>
		</view>
		<!-- 我 -->
		<view v-if="isMe" class="chat_item_my">
			<view class="chat_item_my_box">
				<text class="iconfont chat_item_my_box_icon">{{ right_icon }}</text>
				<view class="chat_item_other_box_content">
					<text class="chat_item_other_box_content_text">{{ data.data }}</text>
				</view>
			</view>
			<image :src="data.from_avatar" class="chat_item_my_icon" />
		</view>
		<!-- 好友 -->
		<view v-else class="chat_item_other">
			<image :src="data.from_avatar" class="chat_item_other_icon" />
			<view class="chat_item_other_box">
				<text class="iconfont chat_item_other_box_icon">{{ left_icon }}</text>
				<view class="chat_item_other_box_content">
					<text class="chat_item_other_box_content_text">{{ data.data }}</text>
				</view>
			</view>
		</view>
	</view>
</template>

<script>
	import Constant from '@/constant/js/const.js';
	import { parseTime, compareTime } from '@/utils/utils.js';
	export default {
		props: {
			data: {
				type: Object,
				default: {}
			},
			lastTime: {
				type: Number,
				default: 0
			}
		},
		data() {
			return {
				otherImg: "/static/images/user_other.jpg",			// 别人
				myImg: "/static/images/userpic.jpg",				// 自己
				left_icon: Constant.left_sound,						// 左三角
				right_icon: Constant.right_sound,					// 右三角
				user_id: 6,   										// 当前登录人的id
			};
		},
		filters: {
			formatTime(val) {
				console.log('this', this)
				return parseTime(val)
			}
		},
		computed: {
			// 判断是否是自己
			isMe() {
				return this.user_id === this.data.from_id
			},
			// 过滤时间(如果在5分钟内发送的信息，则不展示时间)
			getTime () {
				return compareTime(this.data.create_time, this.lastTime)
			}
		}
	}
</script>

<style lang="scss">
@import "@/constant/css/constant.scss";
.chat_item_time {
		height: 98rpx;
		width: $boxWidth;
		@include center;
	}
	.chat_item_time_text {
		font-size: 24rpx;
		color: $listTextColor;
	}
	.chat_item_other {
		flex-direction: row;
		align-items: flex-start;
		margin-bottom: 19rpx;
	}
	.chat_item_my {
		flex-direction: row;
		align-items: flex-start;
		justify-content: flex-end;
		margin-bottom: 19rpx;
	}
	.chat_item_other_icon {
		width: 76rpx;
		height: 76rpx;
		border-radius: 8rpx;
		margin-left: 22rpx;
	}
	.chat_item_my_icon {
		@extend .chat_item_other_icon;
		margin-left: 0;
		margin-right: 22rpx;
	}
	.chat_item_other_box {
		padding-left: 22rpx;
		position: relative;
	}
	.chat_item_my_box {
		padding-right: 22rpx;
		position: relative;
	}
	.chat_item_my_box {
		padding-left: 22rpx;
		position: relative;
	}
	.chat_item_other_box_icon {
		position: absolute;
		top: 20rpx;
		left: 0rpx;
		color: #fff;
	}
	.chat_item_my_box_icon {
		position: absolute;
		top: 20rpx;
		right: 0rpx;
		color: #fff;
	}
	.chat_item_other_box_content {
		max-width: 510rpx;
		border-radius: 8rpx;
		padding: 19rpx;
		background-color: #fff;
	}
	.chat_item_other_box_content_text {
		font-size: 32rpx;
		color: $listTitleColor;
	}
</style>
