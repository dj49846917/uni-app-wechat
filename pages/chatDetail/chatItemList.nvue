<template>
	<view>
		<view class="chat_item_time" v-if="getTime">
			<text class="chat_item_time_text">{{ getTime }}</text>
		</view>
		<!-- 我 -->
		<view v-if="isMe" class="chat_item_my">
			<view class="chat_item_my_box">
				<text class="iconfont chat_item_my_box_icon">{{ right_icon }}</text>
				<view class="chat_item_other_box_content">
					<!-- 文本 -->
					<text v-if="data.type==='text'" class="chat_item_other_box_content_text">{{ data.data }}</text>
					<!-- 图片 -->
					<image v-else-if="data.type==='image'" :src="data.data" :style="chatImg" class="chat_item_other_box_content_img"
					 @load="loadImg" />
					 <!-- 地图 -->
					<view class="chat_map_box" v-else-if="data.type === 'map'">
						<view class="chat_map_text">
							<text class="chat_map_text_loc">{{ data.data.name }}</text>
							<text class="chat_map_text_location">{{ data.data.address }}</text>
						</view>
						<map class="chat_map" :latitude="data.data.latitude" :longitude="data.data.longitude" :markers="data.options.covers">
							<cover-view class="chat_map2"></cover-view>
						</map>
					</view>
					<!-- 音频 -->
					<view class="chat_audio" v-else-if="data.type==='audio'" @click="playAudio(data)">
						<text class="chat_audio_time" style="margin-right: 5rpx;">{{ data.options.duration | parseAudioTime }}</text>
						<image :src="now" class="chat_audio_sound" />
					</view>
				</view>
			</view>
			<image :src="data.from_avatar" class="chat_item_my_icon" />
		</view>
		<!-- 好友 -->
		<view v-else class="chat_item_other">
			<image :src="data.from_avatar" class="chat_item_other_icon" />
			<view class="chat_item_other_box">
				<text class="iconfont chat_item_other_box_icon">{{ left_icon }}</text>
				<view class="chat_item_other_box_content">
					<!-- 文本 -->
					<text v-if="data.type==='text'" class="chat_item_other_box_content_text">{{ data.data }}</text>
					<!-- 图片 -->
					<image v-else-if="data.type==='image'" :src="data.data" :style="chatImg" class="chat_item_other_box_content_img"
					 @load="loadImg" />
					 <!-- 地图 -->
					<view class="chat_map_box" v-else-if="data.type === 'map'">
						<view class="chat_map_text">
							<text class="chat_map_text_loc">{{ data.data.name }}</text>
							<text class="chat_map_text_location">{{ data.data.address }}</text>
						</view>
						<map class="chat_map" :latitude="data.data.latitude" :longitude="data.data.longitude" :markers="data.options.covers">
							<cover-view class="chat_map2"></cover-view>
						</map>
					</view>
					<!-- 音频 -->
					<view class="chat_audio" v-else-if="data.type==='audio'" @click="playAudio(data)">
						<image :src="now" class="chat_audio_sound" style="margin-right: 5rpx;" />
						<text class="chat_audio_time">{{ data.options.duration | parseAudioTime }}</text>
					</view>
				</view>
			</view>
		</view>
	</view>
</template>

<script>
	import Constant from '@/constant/js/const.js';
	import {
		parseTime,
		compareTime
	} from '@/utils/utils.js';
	export default {
		props: {
			data: {
				type: Object,
				default: {}
			},
			lastTime: {
				type: Number,
				default: 0
			}
		},
		data() {
			return {
				otherImg: "/static/images/user_other.jpg", // 别人
				myImg: "/static/images/userpic.jpg", // 自己
				left_icon: Constant.left_sound, // 左三角
				right_icon: Constant.right_sound, // 右三角
				user_id: 6, // 当前登录人的id
				h: 360,
				w: 510,
				now: "/static/images/audio3.png",
				// covers: [{
				// 	latitude: 29.716692,
				// 	longitude: 106.632708
				// }]
			};
		},
		filters: {
			formatTime(val) {
				console.log('this', this)
				return parseTime(val)
			},
			parseAudioTime(val) {
				return `${Math.ceil(val / 1000)}"`
			}
		},
		computed: {
			// 判断是否是自己
			isMe() {
				return this.user_id === this.data.from_id
			},
			// 过滤时间(如果在5分钟内发送的信息，则不展示时间)
			getTime() {
				return compareTime(this.data.create_time, this.lastTime)
			},
			// 对图片做自适应，高度最大不高于360，宽度最大不大于510
			chatImg() {
				return `width: ${this.w}px; height: ${this.h}px;`
			}
		},
		methods: {
			// 动态根据图片原始宽高比计算图片的缩放宽高
			loadImg(e) {
				// 原图的宽高比
				const compares = e.detail.width / e.detail.height
				const maxHeight = uni.upx2px(360)
				const maxWidth = uni.upx2px(510)
				if (e.detail.height > maxHeight) {
					if (maxHeight * compares > maxWidth) {
						this.w = maxWidth
						this.h = this.w / compares
					} else {
						this.h = maxHeight
						this.w = compares * maxHeight
					}
				} else {
					// 原始高度<=360并且宽度大于510
					if (e.detail.width > maxWidth) {
						this.w = maxWidth
						this.h = maxWidth / compares
					} else {
						this.h = e.detail.height
						this.w = e.detail.width
					}
				}
			},
			// 点击播放音频
			playAudio(item) {
				console.log('222')
				const innerAudioContext = uni.createInnerAudioContext();
				innerAudioContext.autoplay = true;
				innerAudioContext.src = item.data.tempFilePath;
				innerAudioContext.onPlay(() => {
				  console.log('开始播放');
				});
				innerAudioContext.onError((res) => {
				  console.log(res);
				});
			}
		}
	}
</script>

<style lang="scss" scoped>
	@import "@/constant/css/constant.scss";

	.chat_item_time {
		height: 98rpx;
		width: $boxWidth;
		@include center;
	}

	.chat_item_time_text {
		font-size: 24rpx;
		color: $listTextColor;
	}

	.chat_item_other {
		flex-direction: row;
		align-items: flex-start;
		margin-bottom: 19rpx;
	}

	.chat_item_my {
		flex-direction: row;
		align-items: flex-start;
		justify-content: flex-end;
		margin-bottom: 19rpx;
	}

	.chat_item_other_icon {
		width: 76rpx;
		height: 76rpx;
		border-radius: 8rpx;
		margin-left: 22rpx;
	}

	.chat_item_my_icon {
		@extend .chat_item_other_icon;
		margin-left: 0;
		margin-right: 22rpx;
	}

	.chat_item_other_box {
		padding-left: 22rpx;
		position: relative;
	}

	.chat_item_my_box {
		padding-right: 22rpx;
		position: relative;
	}

	.chat_item_my_box {
		padding-left: 22rpx;
		position: relative;
	}

	.chat_item_other_box_icon {
		position: absolute;
		top: 20rpx;
		left: 0rpx;
		color: #fff;
	}

	.chat_item_my_box_icon {
		position: absolute;
		top: 20rpx;
		right: 0rpx;
		color: #fff;
	}

	.chat_item_other_box_content {
		max-width: 510rpx;
		border-radius: 8rpx;
		background-color: #fff;
	}

	.chat_item_other_box_content_text {
		font-size: 32rpx;
		color: $listTitleColor;
		padding: 19rpx;
	}

	// 设置默认的高度
	.chat_item_other_box_content_img {
		height: 360rpx;
		width: 510rpx;
	}

	.chat_map_box {
		width: 440rpx;
		height: 280rpx;
		border-radius: 8rpx;
	}

	.chat_map_text {
		width: 440rpx;
		height: 106rpx;
		padding: 20rpx;
	}

	.chat_map_text_loc {
		@include wordBreak;
		font-size: 28rpx;
		margin-bottom: 5rpx;
	}

	.chat_map_text_location {
		font-size: 24rpx;
		@include wordBreak;
	}

	.chat_map {
		width: 440rpx;
		height: 174rpx;
	}
	
	.chat_map2 {
		opacity: 0;
		@extend .chat_map;
	}
	.chat_audio {
		width: 180rpx;
		height: 76rpx;
		border-radius: 8rpx;
		@include verticalCenter;
		justify-content: flex-end;
		padding-right: 20rpx;
	}
	.chat_audio_time {
		font-size: 28rpx;
		color: $listTitleColor;
	}
	.chat_audio_sound {
		width: 50rpx;
		height: 50rpx;
	}
</style>
